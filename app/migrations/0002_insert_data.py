# Generated by Django 4.2.20 on 2025-03-17 03:12

from django.db import migrations
import csv


CSV_DATA_PATH: str = "/app/data_csv/"


def insert_nationality(apps, schema_editor):
    with open(
        file=f"{CSV_DATA_PATH}demonyms-nationality.csv",
        mode="r",
        encoding="utf-8",
    ) as f:
        csvfile = csv.reader(f)
        Nationality = apps.get_model(app_label="app", model_name="Nationality")
        Nationality.objects.bulk_create([Nationality(demonym=d, country=c) for d, c in csvfile])


def insert_driver(apps, schema_editor):
    with open(
        file=f"{CSV_DATA_PATH}f1/drivers.csv",
        mode="r",
        encoding="utf-8",
    ) as f:
        csvfile = csv.reader(f)
        Driver = apps.get_model(app_label="app", model_name="Driver")
        Nationality = apps.get_model(app_label="app", model_name="Nationality")
        driver_objs = []

        next(csvfile)   # skipping column names
        for id, ref, num, code, first, last, dob, nation, url in csvfile:
            n = Nationality.objects.filter(demonym=nation).first()
            d = Driver(id=id,
                       ref=ref,
                       number=num,
                       code=code,
                       forename=first,
                       surname=last,
                       nationality=n,
                       date_of_birth=dob,
                       url=url)
            driver_objs.append(d)
        Driver.objects.bulk_create(driver_objs)


def insert_constructor(apps, schema_editor):
    with open(
        file=f"{CSV_DATA_PATH}f1/constructors.csv",
        mode="r",
        encoding="utf-8",
    ) as f:
        csvfile = csv.reader(f)
        Constructor = apps.get_model(app_label="app", model_name="Constructor")
        Nationality = apps.get_model(app_label="app", model_name="Nationality")
        constructor_objs = []

        next(csvfile)   # skipping column names
        for id, ref, name, nation, url in csvfile:
            n = Nationality.objects.filter(demonym=nation).first()
            c = Constructor(id=id,
                            ref=ref,
                            name=name,
                            nationality=n,
                            url=url)
            constructor_objs.append(c)
        Constructor.objects.bulk_create(constructor_objs)


def insert_circuit(apps, schema_editor):
    with open(
        file=f"{CSV_DATA_PATH}f1/circuits.csv",
        mode="r",
        encoding="utf-8",
    ) as f:
        csvfile = csv.reader(f)
        Circuit = apps.get_model(app_label="app", model_name="Circuit")
        Nationality = apps.get_model(app_label="app", model_name="Nationality")
        circuit_objs = []

        next(csvfile)   # skipping column names
        for id, ref, name, loc, country, y, x, alt, url in csvfile:
            country = Nationality.objects.filter(country=country).first()
            circuit = Circuit(id=id,
                              ref=ref,
                              name=name,
                              location=loc,
                              country=country,
                              longitude=x,
                              latitude=y,
                              altitude=alt,
                              url=url)
            circuit_objs.append(circuit)
        Circuit.objects.bulk_create(circuit_objs)


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            code=insert_nationality,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_driver,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_constructor,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_circuit,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
    ]

