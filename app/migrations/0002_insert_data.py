# Generated by Django 4.2.20 on 2025-03-17 03:12

from datetime import datetime, timedelta
import pandas
import time
import csv

from django.db import migrations


CSV_DATA_PATH: str = "/app/data_csv/"


def _join_dt_helper(*, date, t) -> datetime:
    if t != f"\\N":
        return datetime.strptime(f"{date} {t}", "%Y-%m-%d %H:%M:%S")
    return datetime.strptime(date, "%Y-%m-%d")


def _process_quali_times(*, all_qs):
    converted_quali_time = []

    for quali in all_qs:
        # This isn't pretty, nor the way...
        if isinstance(quali, float):
            converted_quali_time.append(None)
        else:
            dt_obj = datetime.strptime(quali, "%M:%S.%f")
            clean_quali_time = timedelta(minutes=dt_obj.minute,
                                         seconds=dt_obj.second,
                                         microseconds=dt_obj.microsecond)
            converted_quali_time.append(clean_quali_time)

    return converted_quali_time


def insert_nationality(apps, schema_editor):
    with open(file=f"{CSV_DATA_PATH}demonyms-nationality.csv",
              mode="r",
              encoding="utf-8") as f:

        csvfile = csv.reader(f)
        Nationality = apps.get_model(app_label="app", model_name="Nationality")
        Nationality.objects.bulk_create([Nationality(demonym=d, country=c) for d, c in csvfile])


def insert_driver(apps, schema_editor):
    with open(file=f"{CSV_DATA_PATH}f1/drivers.csv",
              mode="r",
              encoding="utf-8") as f:

        csvfile = csv.reader(f)
        Driver = apps.get_model(app_label="app", model_name="Driver")
        Nationality = apps.get_model(app_label="app", model_name="Nationality")
        driver_objs = []

        next(csvfile)   # skipping column names
        for id, ref, num, code, first, last, dob, nation, url in csvfile:
            n = Nationality.objects.filter(demonym=nation).first()
            d = Driver(id=id,
                       ref=ref,
                       number=num,
                       code=code,
                       forename=first,
                       surname=last,
                       nationality=n,
                       date_of_birth=dob,
                       url=url)
            driver_objs.append(d)
        Driver.objects.bulk_create(driver_objs)


def insert_constructor(apps, schema_editor):
    with open(file=f"{CSV_DATA_PATH}f1/constructors.csv",
              mode="r",
              encoding="utf-8") as f:

        csvfile = csv.reader(f)
        Constructor = apps.get_model(app_label="app", model_name="Constructor")
        Nationality = apps.get_model(app_label="app", model_name="Nationality")
        constructor_objs = []

        next(csvfile)   # skipping column names
        for id, ref, name, nation, url in csvfile:
            n = Nationality.objects.filter(demonym=nation).first()
            c = Constructor(id=id,
                            ref=ref,
                            name=name,
                            nationality=n,
                            url=url)
            constructor_objs.append(c)
        Constructor.objects.bulk_create(constructor_objs)


def insert_circuit(apps, schema_editor):
    with open(file=f"{CSV_DATA_PATH}f1/circuits.csv",
              mode="r",
              encoding="utf-8") as f:

        csvfile = csv.reader(f)
        Circuit = apps.get_model(app_label="app", model_name="Circuit")
        Nationality = apps.get_model(app_label="app", model_name="Nationality")
        circuit_objs = []

        next(csvfile)   # skipping column names
        for id, ref, name, loc, country, y, x, alt, url in csvfile:
            country = Nationality.objects.filter(country=country).first()
            circuit = Circuit(id=id,
                              ref=ref,
                              name=name,
                              location=loc,
                              country=country,
                              longitude=x,
                              latitude=y,
                              altitude=alt,
                              url=url)
            circuit_objs.append(circuit)
        Circuit.objects.bulk_create(circuit_objs)


def insert_race(apps, schema_editor):
    with open(file=f"{CSV_DATA_PATH}f1/races.csv",
              mode="r",
              encoding="utf-8") as f:

        cols = [
            "raceId",
            "round",
            "circuitId",
            "name",
            "date",
            "time",
            "url",
        ]
        csvfile = pandas.read_csv(f, header=0, usecols=cols)
        Race = apps.get_model(app_label="app", model_name="Race")
        Circuit = apps.get_model(app_label="app", model_name="Circuit")

        race_objs = []
        for id, r_num, circ_id, n, d, t, url in csvfile.to_numpy():
            c = Circuit.objects.get(pk=circ_id)
            date = _join_dt_helper(date=d, t=t)
            race = Race(id=id,
                        round_number=r_num,
                        circuit=c,
                        name=n,
                        date_of_race=date,
                        url=url)
            race_objs.append(race)
        Race.objects.bulk_create(race_objs)


def insert_qualifying(apps, schema_editor):
    with open(file=f"{CSV_DATA_PATH}f1/qualifying.csv",
              mode="r",
              encoding="utf-8") as f:

        cols = [
            "qualifyId",
            "raceId",
            "driverId",
            "constructorId",
            "position",
            "q1", "q2", "q3",
        ]
        csvfile = pandas.read_csv(f, header=0, usecols=cols)
        Qualifying = apps.get_model(app_label="app", model_name="Qualifying")
        Race = apps.get_model(app_label="app", model_name="Race")
        Driver = apps.get_model(app_label="app", model_name="Driver")
        Constructor = apps.get_model(app_label="app", model_name="Constructor")

        quali_objs = []
        for q_id, r_id, d_id, con_id, pos, q1, q2, q3 in csvfile.to_numpy():
            r = Race.objects.get(pk=r_id)
            d = Driver.objects.get(pk=d_id)
            con = Constructor.objects.get(pk=con_id)

            q_one, q_two, q_three = _process_quali_times(all_qs=[q1, q2, q3])

            quali = Qualifying(id=q_id,
                               race=r,
                               driver=d,
                               constructor=con,
                               position=pos,
                               q_one=q_one, q_two=q_two, q_three=q_three)
            quali_objs.append(quali)
        Qualifying.objects.bulk_create(quali_objs)


def insert_lap_times(apps, schema_editor):
    f_start_time = time.time()

    with open(file=f"{CSV_DATA_PATH}f1/lap_times.csv",
              mode="r",
              encoding="utf-8") as f:
        cols = [
            "raceId",
            "driverId",
            "lap",
            "position",
            "milliseconds",
        ]
        csvfile = pandas.read_csv(f, header=0, usecols=cols)
        LapTime = apps.get_model(app_label="app", model_name="LapTime")
        Driver = apps.get_model(app_label="app", model_name="Driver")
        Race = apps.get_model(app_label="app", model_name="Race")

        lap_time_objs = []
        for r_id, d_id, lap, pos, dur in csvfile.to_numpy():
            r = Race.objects.get(pk=r_id)
            d = Driver.objects.get(pk=d_id)

            t = timedelta(milliseconds=int(dur))

            lap_time = LapTime(race=r,
                               driver=d,
                               lap_number=lap,
                               position=pos,
                               time=t)
            lap_time_objs.append(lap_time)
        LapTime.objects.bulk_create(lap_time_objs)

    print(f"\n\n::Inserting LapTimes took={time.time() - f_start_time}::\n")


def insert_pit_stops(apps, schema_editor):
    f_start_time = time.time()

    with open(file=f"{CSV_DATA_PATH}f1/pit_stops.csv",
              mode="r",
              encoding="utf-8") as f:
        cols = [
            "raceId",
            "driverId",
            "stop",
            "lap",
            "time",
            "milliseconds",
        ]
        csvfile = pandas.read_csv(f, header=0, usecols=cols)
        PitStop = apps.get_model(app_label="app", model_name="PitStop")
        Driver = apps.get_model(app_label="app", model_name="Driver")
        Race = apps.get_model(app_label="app", model_name="Race")

        pit_stop_objs = []
        for r_id, d_id, stop_num, lap_num, local_t, dur in csvfile.to_numpy():
            r = Race.objects.get(pk=r_id)
            d = Driver.objects.get(pk=d_id)
            local_time = datetime.strptime(local_t, "%H:%M:%S")
            dur = timedelta(milliseconds=int(dur))

            pit_stop = PitStop(race=r,
                               driver=d,
                               stop_number=stop_num,
                               lap_number=lap_num,
                               local_time=local_time,
                               duration=dur)
            pit_stop_objs.append(pit_stop)
        PitStop.objects.bulk_create(pit_stop_objs)

    print(f"\n\n::Inserting PitStop took={time.time() - f_start_time}::\n")


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            code=insert_nationality,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_driver,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_constructor,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_circuit,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_race,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_qualifying,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_lap_times,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
        migrations.RunPython(
            code=insert_pit_stops,
            reverse_code=migrations.RunPython.noop,
            atomic=True,
        ),
    ]

